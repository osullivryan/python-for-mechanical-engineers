{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python for Mechanical Engineers This is a collection of tips, tricks, and thoughts on how to use Python in your daily Mechanical Engineering career when you didn't go to school for it in the first place. Summary I'm writing these documents as if I'm creating a new package, simplebeamcalculator , from complete scratch on a new laptop. This should let you skip around to what you need and hopefully help you improve your local, or teams, development and deployment. Warning Some of the environment setup steps are going to seem long, especially if it's your first time doing this. However, I wrote this in a way where you will only need to do this one time. Overall I think it will take you about 30 minutes to complete the environment setup. Some Assumptions I make some assumptions about your environment and working structure that might not apply to everyone, but are certainly general enough for most. If you don't meet all of the assumptions that doesn't mean you can't follow this guide! The basics are that you: Are working in Windows 10. Are going to be using Python ^3.8. ^3.9 is preferred. Have some sort of access to git (either through your work/school or through Github/Gitlab public). Have some patience. If you're accustomed to using excel, matlab, subversion, etc some of these steps might seem foreign. You'll get it though!","title":"Home"},{"location":"#welcome-to-python-for-mechanical-engineers","text":"This is a collection of tips, tricks, and thoughts on how to use Python in your daily Mechanical Engineering career when you didn't go to school for it in the first place. Summary I'm writing these documents as if I'm creating a new package, simplebeamcalculator , from complete scratch on a new laptop. This should let you skip around to what you need and hopefully help you improve your local, or teams, development and deployment. Warning Some of the environment setup steps are going to seem long, especially if it's your first time doing this. However, I wrote this in a way where you will only need to do this one time. Overall I think it will take you about 30 minutes to complete the environment setup.","title":"Welcome to Python for Mechanical Engineers"},{"location":"#some-assumptions","text":"I make some assumptions about your environment and working structure that might not apply to everyone, but are certainly general enough for most. If you don't meet all of the assumptions that doesn't mean you can't follow this guide! The basics are that you: Are working in Windows 10. Are going to be using Python ^3.8. ^3.9 is preferred. Have some sort of access to git (either through your work/school or through Github/Gitlab public). Have some patience. If you're accustomed to using excel, matlab, subversion, etc some of these steps might seem foreign. You'll get it though!","title":"Some Assumptions"},{"location":"deployment/ci/","text":"","title":"Automated Testing"},{"location":"deployment/hosted-pypi/","text":"","title":"Hosted pypi"},{"location":"development/formatting-code/","text":"","title":"Formatting Your Code"},{"location":"development/project-structure/","text":"Starting A Project Remember, we're going to go through an example of creating a new project, simplebeamcalculator . You'll see this throughout. Creating a Project in Git For this example we're going to start a project in Github, however the steps are similar in Gitlab. I'm going to name my project simple-beam-calculator , and then set some defaults for the README and the .gitignore file. Note I used \"kebab\" case for the naming (the dashes between the words \"simple\", \"beam\", and \"calculator\" make it look like a kebab). I prefer this style. It's that simple. Cloning the project You'll need to start by cloning this new repository onto your own machine. On the git page you should see the Code dropdown and within that dialog box a link that ends in .git . This is your git repository link. For me it looks like: git@github.com:osullivryan/simple-beam-calculator.git Copy it. I normally keep all of my git projects in the same directory to help me keep track of them all. So I'm going to run this command from within the directory I want the files : git clone git@github.com:osullivryan/simple-beam-calculator.git After this you should change into that new directory: cd simple-beam-calculator Folder Structure Folder structure (and in a sense package structure) in Python is hard and confusing . I've found a structure that works well and is reliable, so this is how I'll set us up. Create two new directories, src and tests . src stands for source . Within src create a directory called simplebeamcalculator . This is going to be our main package. Create an empty __init__.py file within src/simplebeamcalculator . This tells Python to look for source files here. As your package grows you'll create more folders under src/simplebeamcalculator . For now you should see something like this: simple-beam-calculator \u2502 README.md \u2502 .gitignore \u2502 \u2514\u2500\u2500\u2500src \u2502 \u2514\u2500\u2500\u2500simplebeamcalculator \u2502 \u2502 __init__.py \u2502 \u2514\u2500\u2500\u2500tests Initializing Poetry Poetry is our environment and package manager. It will take care of our packages and python instances for us. We need to initialize it in this new project by running the command: poetry init Note If you chose to name your package in kebab case make sure you remove them in the package name! In the end I ended up entering these options: PS C:\\Users\\osull\\git_projects\\simple-beam-calculator> poetry init This command will guide you through creating your pyproject.toml config. Package name [simple-beam-calculator]: simplebeamcalculator Version [0.1.0]: Description []: Author [Ryan O'Sullivan <osullivryan@gmail.com>, n to skip]: License []: Compatible Python versions [^3.9]: Would you like to define your main dependencies interactively? (yes/no) [yes] no Would you like to define your development dependencies interactively? (yes/no) [yes] no Generated file [tool.poetry] name = \"simplebeamcalculator\" version = \"0.1.0\" description = \"\" authors = [\"Ryan O'Sullivan <osullivryan@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.9\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry-core>=1.0.0\"] build-backend = \"poetry.core.masonry.api\" Do you confirm generation? (yes/no) [yes] yes PS C:\\Users\\osull\\git_projects\\simple-beam-calculator> Finally you should be able to install the Python environment: poetry install And you should be able to start python by running the following: poetry run python","title":"Starting A Project"},{"location":"development/project-structure/#starting-a-project","text":"Remember, we're going to go through an example of creating a new project, simplebeamcalculator . You'll see this throughout.","title":"Starting A Project"},{"location":"development/project-structure/#creating-a-project-in-git","text":"For this example we're going to start a project in Github, however the steps are similar in Gitlab. I'm going to name my project simple-beam-calculator , and then set some defaults for the README and the .gitignore file. Note I used \"kebab\" case for the naming (the dashes between the words \"simple\", \"beam\", and \"calculator\" make it look like a kebab). I prefer this style. It's that simple.","title":"Creating a Project in Git"},{"location":"development/project-structure/#cloning-the-project","text":"You'll need to start by cloning this new repository onto your own machine. On the git page you should see the Code dropdown and within that dialog box a link that ends in .git . This is your git repository link. For me it looks like: git@github.com:osullivryan/simple-beam-calculator.git Copy it. I normally keep all of my git projects in the same directory to help me keep track of them all. So I'm going to run this command from within the directory I want the files : git clone git@github.com:osullivryan/simple-beam-calculator.git After this you should change into that new directory: cd simple-beam-calculator","title":"Cloning the project"},{"location":"development/project-structure/#folder-structure","text":"Folder structure (and in a sense package structure) in Python is hard and confusing . I've found a structure that works well and is reliable, so this is how I'll set us up. Create two new directories, src and tests . src stands for source . Within src create a directory called simplebeamcalculator . This is going to be our main package. Create an empty __init__.py file within src/simplebeamcalculator . This tells Python to look for source files here. As your package grows you'll create more folders under src/simplebeamcalculator . For now you should see something like this: simple-beam-calculator \u2502 README.md \u2502 .gitignore \u2502 \u2514\u2500\u2500\u2500src \u2502 \u2514\u2500\u2500\u2500simplebeamcalculator \u2502 \u2502 __init__.py \u2502 \u2514\u2500\u2500\u2500tests","title":"Folder Structure"},{"location":"development/project-structure/#initializing-poetry","text":"Poetry is our environment and package manager. It will take care of our packages and python instances for us. We need to initialize it in this new project by running the command: poetry init Note If you chose to name your package in kebab case make sure you remove them in the package name! In the end I ended up entering these options: PS C:\\Users\\osull\\git_projects\\simple-beam-calculator> poetry init This command will guide you through creating your pyproject.toml config. Package name [simple-beam-calculator]: simplebeamcalculator Version [0.1.0]: Description []: Author [Ryan O'Sullivan <osullivryan@gmail.com>, n to skip]: License []: Compatible Python versions [^3.9]: Would you like to define your main dependencies interactively? (yes/no) [yes] no Would you like to define your development dependencies interactively? (yes/no) [yes] no Generated file [tool.poetry] name = \"simplebeamcalculator\" version = \"0.1.0\" description = \"\" authors = [\"Ryan O'Sullivan <osullivryan@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.9\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry-core>=1.0.0\"] build-backend = \"poetry.core.masonry.api\" Do you confirm generation? (yes/no) [yes] yes PS C:\\Users\\osull\\git_projects\\simple-beam-calculator> Finally you should be able to install the Python environment: poetry install And you should be able to start python by running the following: poetry run python","title":"Initializing Poetry"},{"location":"development/testing-code/","text":"","title":"Testing"},{"location":"development/typing-code/","text":"","title":"Typing code"},{"location":"environment/getting-started/","text":"","title":"Getting started"},{"location":"environment/installing-tools/","text":"Installing Your Tooling Windows Terminal Note Windows Terminal isn't required, PowerShell or the standard command prompt will work just fine. However, the Windows Terminal has a lot of quality of life improvements like Ctrl-C/V for copying and pasting. The Windows Terminal is a great improvement over the default command prompt, and is what I'll be using to show commands throughout this document. Install it from here . Python Python can be installed in a multitude of ways, but an easy way to install it on Windows is through the Microsoft Store here . The requirements for Python are: A version >= 3.8. Evaluable on the system path: PS C:\\Users\\osull> python Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec 7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Poetry Poetry is like pip but way better. It creates python environments as needed. I'll be using it to install packages, configure testing, and deploying packages throughout these documents. Follow the steps here to install. Note On Windows part of the steps to install Poetry are to add the bin path to your PATH system environment variable. The basic steps are: Search for the Edit the system environment variables in the Start menu. Select Environment Variables... Find Path and select Edit Select New Add %USERPROFILE%\\.poetry\\bin as a new entry at the bottom of the list. Log out and log back in to initialize your path again. Once you have poetry installed you should be able to run the poetry --version command: PS C:\\Users\\osull> poetry --version Poetry version 1.1.4 Important It's best practice to have poetry create the environments within the package directory. Use the following command to do so: bash poetry config virtualenvs.create false --local Visual Studio Code Visual Studio Code (VSCode) can be thought of as either a very lightweight IDE, or a very detailed text editor. We are going to be using it more as an IDE. Install it from here VSCode Extensions There are so many awesome extensions for VSCode. I typically have a dozen installed at one time. There are at least two that you'll need (Python and Pylance) and I've listed some others that I just like to use. Python This is the go-to python extension for VSCode. This will make your life so much different. Pylance This is the (fairly new) language server for the python extension. Git Git is the primary source-control tool used today. Github (a git-based company) has a great guide for installing git here , however you should use your repository's steps to make sure you set up your SSH keys, which will be needed to push/pull from projects. Some basic things you'll have to do: Use the git-bash to retrieve SSH keys. Upload those SSH keys to your git repository. Configure your name and email address in git.","title":"Installing Tooling"},{"location":"environment/installing-tools/#installing-your-tooling","text":"","title":"Installing Your Tooling"},{"location":"environment/installing-tools/#windows-terminal","text":"Note Windows Terminal isn't required, PowerShell or the standard command prompt will work just fine. However, the Windows Terminal has a lot of quality of life improvements like Ctrl-C/V for copying and pasting. The Windows Terminal is a great improvement over the default command prompt, and is what I'll be using to show commands throughout this document. Install it from here .","title":"Windows Terminal"},{"location":"environment/installing-tools/#python","text":"Python can be installed in a multitude of ways, but an easy way to install it on Windows is through the Microsoft Store here . The requirements for Python are: A version >= 3.8. Evaluable on the system path: PS C:\\Users\\osull> python Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec 7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"Python"},{"location":"environment/installing-tools/#poetry","text":"Poetry is like pip but way better. It creates python environments as needed. I'll be using it to install packages, configure testing, and deploying packages throughout these documents. Follow the steps here to install. Note On Windows part of the steps to install Poetry are to add the bin path to your PATH system environment variable. The basic steps are: Search for the Edit the system environment variables in the Start menu. Select Environment Variables... Find Path and select Edit Select New Add %USERPROFILE%\\.poetry\\bin as a new entry at the bottom of the list. Log out and log back in to initialize your path again. Once you have poetry installed you should be able to run the poetry --version command: PS C:\\Users\\osull> poetry --version Poetry version 1.1.4 Important It's best practice to have poetry create the environments within the package directory. Use the following command to do so: bash poetry config virtualenvs.create false --local","title":"Poetry"},{"location":"environment/installing-tools/#visual-studio-code","text":"Visual Studio Code (VSCode) can be thought of as either a very lightweight IDE, or a very detailed text editor. We are going to be using it more as an IDE. Install it from here","title":"Visual Studio Code"},{"location":"environment/installing-tools/#vscode-extensions","text":"There are so many awesome extensions for VSCode. I typically have a dozen installed at one time. There are at least two that you'll need (Python and Pylance) and I've listed some others that I just like to use.","title":"VSCode Extensions"},{"location":"environment/installing-tools/#python_1","text":"This is the go-to python extension for VSCode. This will make your life so much different.","title":"Python"},{"location":"environment/installing-tools/#pylance","text":"This is the (fairly new) language server for the python extension.","title":"Pylance"},{"location":"environment/installing-tools/#git","text":"Git is the primary source-control tool used today. Github (a git-based company) has a great guide for installing git here , however you should use your repository's steps to make sure you set up your SSH keys, which will be needed to push/pull from projects. Some basic things you'll have to do: Use the git-bash to retrieve SSH keys. Upload those SSH keys to your git repository. Configure your name and email address in git.","title":"Git"}]}